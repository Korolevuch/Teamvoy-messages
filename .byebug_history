exit
@message.save
@message.count_visit += 1
   @message = Message.friendly.find(params[:id])
exit
@message.save
@message
@message.count_visit += 1
@message
next
@message
exit
self.visit?
self.visit
self.exstraction == 'visit'
self.extraction == 'visit'
self.visit
self.visit?
self
quit
@message
next
@message
@message.count_visit += 1
 @message ||= Message.friendly.find(params[:id])
quit
next
nex
next
nex
next
Message.new(exstraction: params[:message][:exstraction])
params[:message][:exstraction]
Message.new(description: AESCrypt.encrypt(params([:message][:description], '123'),exstraction: params[:message][:exstraction]))
exstraction: params[:message][:exstraction]
params[:message][:exstraction]
exstraction: params[:message][:exstraction]
params[:message][:exstraction]
params
quit
quir
@message
@messages
@message = Message.new(description: AESCrypt.encrypt(params[:message][:description], '123',exstraction: params[:message][:exstraction]))
params
quit
params
quit
next
params
exit
stop
end
params
next
params
next
params
next
quit
params
q
= f.select  :exstraction, options: Message.exstractions.keys.map {|el| el }
Message.exstractions.keys.map {|el| el }
X                                                                   â”‚p {|el| el }
q
exit
url_for(:messages, :show, id: params[:id])
params
exit
@message
url_for(:messages, :show, id: @message.slug)
url_for(:messages, :show, id: 1)
url_for(:messages, :show)
url_for(:show)
url_for(:messages)
url_for(:message)
url_for(:index)
messages_path
exit
id_isnt_numeric?(params[:id])
id_isnt_numeric?
params[:id]
params[Lid]
params
