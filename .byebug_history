exit
Message.exists?(slug: params[:id])
params[:id]
params
if Message.exists?(slug: params[:id])
exit
Message.exists?(slug: params[:id])
exit
render 'messages/404'
Message.exists?(slug: params[:id])
Message.exists?(exstraction: 'visit')
Message.exists?(params[:id])
params[:id]
Message.exists?(id: params[:id])
Message.exists?(id: params[13])
Message.all.exists?(id: params[13])
Message.all
Message.all.exists?(id: params[1])
Message.all.exists?(id: params[:id])
params
Message.exists?(id: params[:id])
exit
if @message != nil
if @message != 0
if @message;
if @message
@message
@mesages
@messages
@message = Message.friendly.find(params[:id])
exit
if 
if !a
a
if a == nill
if a == nil
a =  Message.friendly.find(params[:id])
 Message.friendly.find(params[:id])
if Message.friendly.find(params[:id]) == nil
if Message.friendly.find(params[:id]) =! nil
if Message.friendly.find(params[:id]) != nil
exit
jobs.fetch(duration_to_fetch)
duration_to_fetch
exit
duration
exit
self.duration.class
self.duration
self
exit
self
duration
exit
jobs.fetch(duration_to_fetch)
exit
ActiveSupport::Duration.new(60, :seconds).class
ActiveSupport::Duration.new(60, :seconds)
ActiveSupport::Duration.new
ActiveSupport::Duration
exit
jobs.keys.first.to_i
jobs.keys.first.class
jobs.keys.first
jobs.keys
jobs
hobs
jobs.fetch(duration_to_fetch) { [] }
jobs.fetch(duration_to_fetch + 'seconds') { [] }
duration.class
duration
ActiveSupport::Duration
duration
jobs.values.flatten
duration_to_fetch
jobs
exit
exi
jobs
duration_to_fetch
jobs.fetch(duration_to_fetch) { [] }
exit
jobs
duration_to_fetch
exit
jobs.fetch(duration_to_fetch) { [] }
exit
jobs
exit
setup
schedule
exit
setup_file = File.expand_path('../setup.rb', __FILE__)
options.is_a? String
options
exit
jobs
exit
jobs
exit
jobs
duration_to_fetch
exit
Whenever::JobList
Whenever
exit
message_object
params[:message_object]
params
exit
DeleteMessages.(messages_object: self)
exit
::Message
exit
::Message
Message
exit
Dir["#{File.expand_path("..", Dir.pwd + "models")}"]
Dir["#{File.expand_path("..", Dir.pwd + "#{models}")}"]
Dir["#{File.expand_path("..", Dir.pwd2 + "#{models}")}"]
Dir["#{File.expand_path("..", Dir.pwd)}/models/"]
Dir["#{File.expand_path("..", Dir.pwd)}/models/**/*.rb"]
Dir["#{File.expand_path("..", Dir.pwd)}/app/models/**/*.rb"]
File.expand_path("..", Dir.pwd)
Dir["#{Dir.pwd}/app/models/**/*.rb"]
Dir["~/project/messages/app/models/**/*.rb"]
Dir["~/project/messages/app/models/**/*.rb"].each(&method(:require))
Dir["~/project/messages/ap/models/**/*.rb"].each(&method(:require))
`ls`
.ls
Dir.pwd
Dir.ppwd
Dir["../models/**/*.rb"].each(&method(:require))
Dir[("../models/**/*.rb")].each(&method(:require))
Dir["../models/**/*.rb")].each(&method(:require))
Dir['models']
Dir['../models']
Dir
exit
runner Message.not_actual_messages.destroy_all
runner
exit
@message.save
@message.count_visit += 1
   @message = Message.friendly.find(params[:id])
exit
@message.save
@message
@message.count_visit += 1
@message
next
@message
exit
self.visit?
self.visit
self.exstraction == 'visit'
self.extraction == 'visit'
self.visit
self.visit?
self
quit
@message
next
@message
@message.count_visit += 1
 @message ||= Message.friendly.find(params[:id])
quit
next
nex
next
nex
next
Message.new(exstraction: params[:message][:exstraction])
params[:message][:exstraction]
Message.new(description: AESCrypt.encrypt(params([:message][:description], '123'),exstraction: params[:message][:exstraction]))
exstraction: params[:message][:exstraction]
params[:message][:exstraction]
exstraction: params[:message][:exstraction]
params[:message][:exstraction]
params
quit
quir
@message
@messages
@message = Message.new(description: AESCrypt.encrypt(params[:message][:description], '123',exstraction: params[:message][:exstraction]))
params
quit
params
quit
next
params
exit
stop
end
params
next
params
next
params
next
quit
params
q
= f.select  :exstraction, options: Message.exstractions.keys.map {|el| el }
Message.exstractions.keys.map {|el| el }
X                                                                   â”‚p {|el| el }
q
exit
url_for(:messages, :show, id: params[:id])
params
exit
@message
url_for(:messages, :show, id: @message.slug)
url_for(:messages, :show, id: 1)
url_for(:messages, :show)
url_for(:show)
url_for(:messages)
url_for(:message)
url_for(:index)
messages_path
exit
id_isnt_numeric?(params[:id])
id_isnt_numeric?
params[:id]
params[Lid]
params
